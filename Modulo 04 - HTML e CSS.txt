		Iframes

Iframe é uma "caixa" inline.

Ex.: 

<body>
    <h1>Testando o uso de iframe</h1>
    <p>Acessando o site do
        
        <iframe src="https://www.cursoemvideo.com" frameborder="0"></iframe>
        
        para aprender a programar.</p>

        <p>O site do <iframe src="https://www.google.com.br" frameborder="0"></iframe> também é muito legal, pena que não funciona dentro d iframe.</p>
</body>

** Alguns sites não permitem que seus conteúdos apareçam em iframes.

---------------------------------------------------------

- A maioria dos navegadores não aceitam iframes. Basta colocar um texto ou um link alternativo para aparecer caso o iframe não funcione. Ex.:

	<p>O repositório do Guanabara no <iframe src="https://gustavoguanabara.github.io" frameborder="0">
            <a href="https://gustavoguanabara.github.io" target="_blank">GitHub</a>  // Texto ou link alternativo
        </iframe> também é bem legal!</p>

- Tamanho padrão de um iframe: 300x150. Porém podemos alterar usando o height e o width no proprio iframe ou usando CSS. Caso haja em ambos, prevalece as CSS.
Ex.:
	<p>Acessando o site do
        
        <iframe src="https://www.cursoemvideo.com" frameborder="0" height="450">
            <a href="https://www.cursoemvideo.com" target="_blank"> Curso em Vídeo</a>
        </iframe>

- frameborder="0"  // Sem borda
  frameborder="1"  // Borda de 1px

* Mas pode alterar a borda utilizando CSS


- Páginas locais dentro do iframe

<ul>
    <li><a href="paginas-extras/pag001.html" target="frame">Primeira Página</a></li> // Usar o nome do frame onde deseja abrir esta página usando o target
    <li><a href="paginas-extras/pag002.html" target="frame">Segunda Página</a></li>
    <li><a href="paginas-extras/pag003.html" target="frame">Terceira Página</a></li>
</ul>

<iframe src="" id="tela" name="frame">  // Da um nome a tag
        Infelizmente seu navegador não é compatível com isso!
</iframe>

* Vai abrir uma página dentro do iframe sempre que o usuário clicar nele.

-------------------------------------------------------------------

		Formulários

Ex.:
	form>
        	<p>Nome: <input type="text" name="nome" id="nome"></p>
        	<p>Sobrenome: <input type="text" name="sobrenome" id="sobrenome"></p>
        	<input type="submit" value="Enviar">
    	</form>

* input de tipo text:
	precisam das propriedades name e id;
* input de tipo submit:
	a propriedade value é o nome que ficara no botão;

- Propriedade autocomplete:
	<form autocomplete="off">  // Desabilita

- Enviar o formulário para o local desejado:
	Ex.: <form action="cadastro.php">  // Ao clicar no input submit

- Relacionando o <label> ao seu input:
	<form action="cadastro.php" autocomplete="off">
        	<p><label for="inome">Nome:</label> 
            	<input type="text" name="nome" id="inome"></p>
        	<p><label for="isobrenome">Sobrenome:</label> 
            	<input type="text" name="sobrenome" id="isobrenome"></p>
        	<input type="submit" value="Enviar">
    	</form>
   *Na propriedade 'for' indica o id do input

- Métodos GET e POST

	GET = padrão. Os dados inseridos no formulário aparece na URL
	POST = Oo dados inseridos no formulário não aparecem no formulário.
	Ex.: <form action="cadastro.php" method="POST" autocomplete="off">

*Sobre o GET:
	Quando os dados não forem sensíveis;
	Quando os dados não utrapassarem 3000 bytes (mais ou menos 3 mil letras);

*Sobre o POST:
	Quando os dados forem sensíveis;
	Quando não quiser que os dados apareçam na URL;
	Se os dados tiverem mais de 3000 bytes;
	Quando precisar fazer envio de arquivos;

- Criando caixas de texto e senhas:

	<form action="cadastro.php" method="post">
    		<p>
        		<label for="iusu">Usuário: </label>
        		<input type="text" name="usu" id="iusu" required minlength="5" maxlength="15" size="10" placeholder="Nome de Usuário" autocomplete="off">
    		</p>
    		<p>
        		<label for="isen">Senha: </label>
        		<input type="password" name="sen" id="isen" required minlength="8" maxlength="20" size="8" placeholder="Mínimo de 8 Caracteres">
    		</p>
    		<p>
        		<input type="submit" value="Enviar">
        		<input type="reset" value="Limpar">
    		</p>
	</form>

	- required .......................... Campo obrigatório
	- minlength="5" ..................... Mínimo de Caracteres
	- maxlength="15" .................... Máximo de Caracteres
	- size="10" ......................... Nº de caracteres que irão aparecer na caixa
	- placeholder="Nome de Usuário" ..... Dica do que é para ser digitado no campo
	- autocomplete="off"................. Campo de autocompletar
		* Se o autocomplete for usado na tag <form> aparecerá apenas as opções de "on" e "off"
		  Se for usado na tag <input> aparecerá várias opções

- Outros exemplos de input:

	<form action="cadastro.php" method="get" autocomplete="on">
        	<p>
            		<label for="inome">Nome: </label>
            		<input type="text" name="nome" id="inome" required maxlength="30" placeholder="Nome Completo" autocomplete="name">
        	</p>
        	<p>
            		<label for="imedia">Média</label>
            		<input type="number" name="media" id="imedia" min="0" max="10" placeholder="0 a 10" step="0.1" required>
        	</p>
        	<p>
            		<label for="imes">Período Letivo</label>
            		<input type="month" name="mes" id="imes" value="2024-01">
        	</p>
        	<p>
            		<label for="idia">Dia da Prova</label>
            		<input type="date" name="dia" id="idia" value="2024-02-05">
        	</p>
        	<p>
            		<label for="ihora">Horário da Prova</label>
            		<input type="time" name="hora" id="ihora">
        	</p>
        	<p>
            		<input type="submit" value="Enviar">
            		<input type="reset" value="Limpar">
        	</p>
    </form>

	- min="0" ............... Valor mínimo
	- max="10" .............. Valor máximo
	- step="0.1" ............ Passo
	- value="2024-02-05" .... Já exibir um valor como padrão

- Formulários com telefone e e-mail:
	
	<form action="cadastro.php" method="get" autocomplete="on">
        <fieldset>
            <legend>Dados Pessoais</legend>
            <p>
                <label for="inome">Nome</label>
                <input type="text" name="nome" id="inome" minlength="5" maxlength="20" required>
            </p>
            <p>
                <label for="iemail">E-mail</label>
                <input type="email" name="email" id="iemail" autocomplete="email" required>
            </p>
            <p>
                <label for="itel">Telefone</label>
                <input type="tel" name="tel" id="itel" autocomplete="tel" pattern="^[1-9]{2}[0-9]{4, 5}[0-9]{4}$" required>
            </p>
            <!-- Estudar mais sobre RegEx (Expressões Regulares) -->
            <p>
                <input type="submit" value="Enviar">
                <input type="reset" value="Limpar">
            </p>
        </fieldset>
    </form>

	- pattern="" ........ Tentar realizar um padrão a ser digitado em determinado campo. Ex.: pattern="^[1-9]{2}[0-9]{4, 5}[0-9]{4}$"
	- <fieldset> ........ Tag para agrupar um conjunto de campos ou formulários
	- <legend> .......... Adicionar uma legenda ao fieldset

- Checkbox e radio button:

	<form action="cadastro.php" method="get" autocomplete="on">
        <fieldset>
            <legend>Sexo</legend>
            <input type="radio" name="sexo" id="isxmas" value="M" checked><label for="isxmas">Masculino</label>
            <input type="radio" name="sexo" id="isxfem" value="F"><label for="isxfem">Feminino</label>
        </fieldset>
		// name="": deve ter o mesmo nome pra que se possa marcar apenas uma opção;
		// checkbox:radio: não há como desmarcar, a não ser que escolha a outra opção;
        <fieldset>
            <legend>Esportes favoritos</legend>
            <input type="checkbox" name="esfut" id="iesfut"> <label for="iesfut">Futebol</label> <br>
            <input type="checkbox" name="esbas" id="iesbas"> <label for="iesbas">Basquete</label> <br>
            <input type="checkbox" name="esnat" id="iesnat"> <label for="iesnat">Natação</label> <br>
            <input type="checkbox" name="esten" id="iesten"> <label for="iesten">Tênis</label>
        </fieldset>
		// Pode marcar todos possíveis, como também desmarcá-los;
        <p>
            <input type="submit" value="Enviar">
            <input type="reset" value="Limpar">
        </p>
    </form>

	- input:checkbox .....
	- input:radio ........

- Elementos color, range e file:

	<form action="" method="get" autocomplete="on">
        <p>
            <label for="icor">Cor</label>
            <input type="color" name="cor" id="icor" value="#00ff00">
        </p>
		// Por padrão a cor varia de navegador para nvegador, mas podemos alterar usando o value="";

        <p>
            <label for="inivel">Nível de Satisfação</label>
            <input type="range" name="nivel" id="inivel" min="1" max="5" value="2">
        </p>
		// Por padrão o mínimo e máximo vem de 1-100 (mas pode variar de acordo com o navegador), mas podemos alterar usando o min="" e max="";
		// Por padrão irá iniciar no valor mais ao meio (mas pode variar de acordo com o navegador), mas podemos alterar usando o value="";

	 <p>
            <label for="ifoto">Foto</label>
            <input type="file" name="foto" id="ifoto">
        </p>
		// O input do tipo file permite que o usuário escolha um arquivo do armazenamento do dispositivo e envie esse arquivo através de um formulário HTML.
		// Quando utilizar este input:file o metodo a ser usado é o POST.

        <p>
            <input type="submit" value="Enviar">
            <input type="reset" value="Limpar">
        </p>
    </form>

- Select, datalist e textarea: 

	ELEMENTO SELECT:

	A tag de formulário <select></select> tem uma função muito parecida com a de um input.. Isso porque ela renderiza na tela um componente de entrada para o 		formulário.

	O elemento HTML select (<select>) representa um controle que exibe um menu de opções. É um elemento que ao clicarmos, desce uma lista com diferentes opções 		para escolher.
	
	No elemento select, o usuário não insere um dado digitando, ele simplesmente seleciona a opção que lhe atende... Portanto, use esse elemento para a entrada de 		dados que são imutáveis. Por exemplo: Usar o elemento select para escolher um dos estados do Brasil. Não existe necessidade de alguém eventualmente precisar 		escolher outro item que já não esteja na lista porque a composição dos estados é teoricamente imutável.

	Nota: No elemento select, os atributos "name" e "id" também devem ser configurados normalmente... Ele também se enquadra em um componente de entrada como 		qualquer outro, portanto também precisa de uma label. Sendo que o VÍNCULO entre o componente select e sua respectiva label também deve ser estabelecido. 

	Depois de inserir o select no seu form, é preciso definir as opções que irão compor a lista de seleção dele. Para definir as opões do elemento, usamos a tag 		<option></option>.

	Essa tag deve ser inserida dentro do elemento select (option é sempre introduzido como filho de select nesse caso), sendo que ela tem a função de definir as 		opções aparecerão dentro do menu de seleção. Para cada opção da lista, um novo option deve ser aberto dentro de select.

	O rótulo da opção (texto que representa o item de lista quando a caixa de seleção é aberta) deve ser inserido dentro do par de tags do option, por exemplo: 		<option>Santa Catarina</option>. 

	Sendo que por padrão, quando uma tag option é aberta, um atributo "value" já acompanha a tag. É o conteúdo dentro de "value" que de fato será enviado para o 		servidor quando a submissão do form é executada. Seguindo o exemplo anterior, a nossa opção com o value configurado pode ser assim: <option value="SC">Santa 		Catarina</option>

	Dentro de uma lista de seleção do elemento select, os options (itens da lista) podem ser AGRUPADOS em categorias intituladas, isso facilita a navegação do 		usuário. Por exemplo, na nossa lista com os estados do Brasil, poderíamos organizar esses estados pelas regiões do país, categorizar eles por região... Dessa 		maneira, quando a lista de seleção for aberta, os estados iriam aparecer agrupados por região, sendo que cada um desses grupos de estado teriam um título 		(sudeste, sul, centro-oeste e por aí vai).

	Para fazer isso, utilizamos a tag <optgroup></optgroup>. Para formar um grupo dentro da lista de seleção com o optgroup, você deve envelopar com essa tag os 		itens (options) que supostamente fazem parte daquele grupo. Sendo que obrigatoriamente, quando uma tag optgroup é aberta, temos que usar nela o atributo 		"label" (é um atributo que se chama label, não é uma tag label). O texto inserido dentro do atributo label que será exibido para o usuário como o título 		daquele grupo quando a lista for aberta.  

	Nota: Os itens da lista de seleção (options) ficam dispostos para o usuário na ordem de inserção do código HTML. 

	Atributos do select:

	selected:

	O atributo selected serve para definirmos uma opção inicial padrão, ele deve ser inserido dentro da tag de abertura do option que você deseja definir como 		padrão. Dessa forma, quando a página com o elemento select for carregada, essa opção escolhida já vai aparecer por padrão selecionada no componente de entrada 		select, ficando a critério do usuário alterar a opção ou manter a padrão determinada por você.


	<form action="cadastro.php" method="post" autocomplete="on">
        <p>
            <label for="iest">Estado</label>
            <select name="estado" id="iest">
                <option value="AC">Acre</option>
                <option value="AL">Alagoas</option>
                <option value="AP">Amapá</option>
                <option value="AM">Amazonas</option>
                ...
            </select>
        </p>

        <p>
            <label for="iprof">Profissão</label>
            <input type="text" name="prof" id="iprof" list="listprof"> // list="listprof" - usando o id da datalist no atributo list="" para adicionar a lista no input
            <datalist id="listprof">
                <option value="ADM">Administração</option>
                <option value="DEV">Desenvolvedor</option>
                <option value="PROF">Professor</option>
                <option value="CONT">Contabilista</option>
            </datalist>
        </p>
		// Datalist - para permitir que além das opções listadas, o usuário possa inserir uma opção que não esteja na lista.

        <p>
            <label for="imsg">Mensagem</label>
            <textarea name="msg" id="imsg" cols="30" rows="10"></textarea>
        </p>
		// Uma caixa de texto para o usuário digitar;
		// Podemos usar o atributo  style="resize: none" para evitar que o usuário altere o tamanho do textarea...
		// Podemos colocar um maxlenght="x" no textarea, para limitar a quantidade de caracteres que o usuário pode digitar

        <p>
            <input type="submit" value="Enviar">
            <input type="reset" value="Limpar">
        </p>

    </form>

-Output:

		O <output></output> se trata de um elemento de saída, utilizado somente para fins de exibição. É um elemento no qual um processo programado pode 		injetar os resultados de um cálculo ou o resultado de uma ação do usuário por exemplo.

	Por ser um elemento de saída, isso significa que: Quando utilizado, a tag de formulário output deve estar associada a um script. O resultado gerado por esse 		script, como um número por exemplo, deve ser renderizado no elemento output.

	Segue um exemplo de código HTML usando o output (contém um script simples também):

	<form action="cadastro.php" method="get">
	    <fieldset>
	        <legend>Teste - output</legend>
	
	        <label for="n1">Digite o primeiro número:</label>
	        <input type="number" name="n1" id="n1" required oninput="resultado.innerHTML 
	        = Number(n1.value) + Number(n2.value)">
	
	        <label for="n2">Digite o segundo número:</label>
	        <input type="number" name="n2" id="n2" required oninput="resultado.innerHTML 
	        = Number(n1.value) + Number(n2.value)">
	
	        <label for="resultado">Resultado da soma:</label>
	        <output for="n1 n2" id="resultado"></output>
	
	        <div>
	            <input type="submit" value="Enviar">
	            <input type="reset" value="Limpar">
	        </div>
	    </fieldset>
	</form>

	No exemplo de código acima, nós criamos um sistema simples que tem como função somar os números introduzidos no primeiro e no segundo campo, sendo que o 		resultado dessa soma é exibido no elemento output.

	Nesse exemplo, nós temos dois elementos de entrada para números (inputs tipo number) e logo abaixo deles há uma tag de formulário "output". Basicamente, dentro 	dos inputs que recebem os números, temos o atributo "oninput" com um script em JS que faz esse cálculo de somatória e exibe o resultado no elemento de saída 		output (os scripts são idênticos em ambos os atributos oninput dos campos). 

	Nota: De forma resumida, o atributo "oninput" contido nas caixas de entrada numéricas é utilizado para executar uma ação quando o usuário digita algo no 		controle ou altera o valor do campo. Nesse caso, o nosso script de soma está contido nesses atributos como valor deles... Dessa forma, qualquer alteração nos 		campos numéricos fará a ação do script de soma ser disparada. Lembre-se que o intuito aqui não é explicar como o código do script funciona, e sim mostrar como 		o elemento output trabalha. 

	Observe no exemplo que foi atribuído ao elemento de saída (output) um id nomeado como "resultado". Já no script, foi especificado que o número resultante da 		somatória seria exibido nesse output... Só foi possível fazer isso porque o output foi justamente identificado com esse id. 

	Dessa forma, sempre que você usar o elemento output, é indicado configurá-lo com um "id" ou "name"... Mas quando usar id ou name no output?  

	Atribuir um id ou name para o elemento <output> é útil quando você quer acessá-lo usando JavaScript (ou outra linguagem) para atualizar seu valor. Se você 		quiser acessar um elemento <output> específico usando JavaScript, é geralmente mais fácil e mais eficiente fazê-lo pelo seu id. 

	Por outro lado, se você quiser acessar vários elementos <output> que compartilham o mesmo atributo name (sendo que no id não existe essa possibilidade visto 		que ele é único), pode ser mais fácil fazê-lo pelo name.

	Portanto, se o seu script trabalha utilizando apenas um elemento output, use o id para identificá-lo... Já se esse script trabalha usando vários componentes 		output ao mesmo tempo, opte pelo name. (Também não é problema usar o id e o name ao mesmo tempo em um output, tudo vai depender da necessidade da sua 			aplicação).

	Perceba que no nosso exemplo o output também possui uma label... Não é algo obrigatório, mas é perfeitamente possível e recomendado atribuir uma label a um 		output, visto que ele é considerado um elemento "rotulável"... Sendo que podemos estabelecer o vínculo entre a label e o componente output normalmente também.

	Atenção: Em componentes de entrada para formulários (inputs) usamos o name e id para identificar o campo no servidor, criar vínculos com labels e etc... Já no 		elemento output, nós só usamos esses atributos de identificação para conseguir associar o elemento de saída com um script (com labels também no caso dos id's), 	e não para enviar dados identificados para o back-end. 

	Isso se deve porque o valor do elemento <output> NÃO é enviado para o servidor quando um formulário é enviado/submetido. É possível enviar para o servidor 		aquilo que é renderizado no elemento de saída output, mas fazemos isso com configurações adicionais no script e utilizando um outro elemento input especial que 	é feito para isso e fica oculto (hidden). 

	Obs.: O elemento <output> é uma opção para exibir o resultado de um cálculo ou ação do usuário, mas não é a única opção. Você poderia usar outros elementos 		HTML para exibir o resultado de um script, como por exemplo: <div>, <span> ou <p>... A escolha do elemento apropriado depende do contexto e do design do seu 		site ou aplicativo. Porém, usando o elemento output, deixamos o nosso código HTML com o máximo de semântica possível.

	Atributos da tag de formulário output:

	for:

	O atributo "for" aplicado no elemento <output> especifica a relação entre o resultado do cálculo (ou o resultado de uma ação do usuário) e os ELEMENTOS USADOS 		nesse cálculo.  

	O valor do atributo "for" deve ser uma lista de "id's" dos elementos usados no cálculo separados por espaços, indicando que esses elementos contribuíram com 		valores de entrada para (ou de outra forma afetaram) o cálculo.

	Portando, quando você estiver trabalhando com o elemento de saída <output>, use o atributo "for" para indicar quais são os componentes de entrada envolvidos no 	resultado que está sendo renderizado dentro dele.

	Observe que o atributo "for" no elemento <output> tem uma função puramente semântica e não afeta o comportamento do elemento <output>. Você pode omiti-lo se 		quiser, mas incluí-lo pode tornar seu código mais fácil de entender.

	Especificar a relação entre o resultado do cálculo e os elementos usados no cálculo ajuda a tornar o código mais legível e autoexplicativo... Assim como foi 		feito no nosso exemplo ( for="n1 n2" ).

__________________________________________________________________

		Media Queries em CSS - Cap. 25

- Media query, nada mais é do que uma estrutura do CSS que permite aplicar estilizações especificas para uma página web de acordo com certas condições, fazendo assim com que esta página possa se adequar ao layout de tela em diferentes tamanhos e tipos de mídia.

Principais media types:

media	="print"   	-> para impressoras;
		="screen"	-> para monitores de computadores, tablets e smartphones;
		="handheld"	-> para dispositivos de mão;
		="all"		-> para todos os tipos de mídia.